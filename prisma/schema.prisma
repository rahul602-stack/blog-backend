// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  role          Role      @default(WRITER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  posts         Post[]    @relation("UserPosts")
  comments      Comment[] @relation("AuthorComments")
  
  // Self-referential relation for creator tracking
  createdById   Int?
  createdBy     User?     @relation("UserCreator", fields: [createdById], references: [id])
  createdUsers  User[]    @relation("UserCreator")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userName  String?  // Optional for anonymous users
  
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Optional relation to User for authenticated comments
  authorId  Int?
  author    User?    @relation("AuthorComments", fields: [authorId], references: [id])

  @@index([postId])
  @@index([authorId])
}

enum Role {
  WRITER
  ADMIN
}
